import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# 1. Generate Synthetic Remote Sensing Reflectance Data
np.random.seed(42)
n_samples = 150
Rrs_blue = np.random.uniform(0.001, 0.02, n_samples)
Rrs_green = np.random.uniform(0.001, 0.03, n_samples)
Rrs_red = np.random.uniform(0.001, 0.015, n_samples)
Rrs_nir = np.random.uniform(0.0005, 0.01, n_samples)

# 2. Generate Chlorophyll-a concentration using a semi-empirical nonlinear model
# Simulating log-normal distribution + noise
chl_true = 10 ** (0.5 * np.log10(Rrs_green / Rrs_blue) + 0.2 * np.log10(Rrs_red / Rrs_nir))
noise = np.random.normal(0, 0.2, n_samples)
chlorophyll_a = chl_true + noise

# 3. Assemble DataFrame
df_chl = pd.DataFrame({
    'Rrs_blue': Rrs_blue,
    'Rrs_green': Rrs_green,
    'Rrs_red': Rrs_red,
    'Rrs_nir': Rrs_nir,
    'Chlorophyll_a': chlorophyll_a
})

# 4. Split Data
X = df_chl[['Rrs_blue', 'Rrs_green', 'Rrs_red', 'Rrs_nir']]
y = df_chl['Chlorophyll_a']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 5. Train Models
# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Random Forest
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# 6. Evaluation Function
def evaluate(model_name, y_true, y_pred):
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)
    print(f"{model_name} - RMSE: {rmse:.3f}, RÂ²: {r2:.3f}")

evaluate("Linear Regression", y_test, y_pred_lr)
evaluate("Random Forest", y_test, y_pred_rf)

# 7. Plot Results
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
sns.scatterplot(x=y_test, y=y_pred_lr)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
plt.title("Linear Regression Prediction")
plt.xlabel("Actual Chlorophyll-a")
plt.ylabel("Predicted")

plt.subplot(1, 2, 2)
sns.scatterplot(x=y_test, y=y_pred_rf)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
plt.title("Random Forest Prediction")
plt.xlabel("Actual Chlorophyll-a")
plt.ylabel("Predicted")

plt.tight_layout()
plt.show()
